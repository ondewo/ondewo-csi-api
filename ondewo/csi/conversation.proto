// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.csi;
import "ondewo/nlu/session.proto";
import "ondewo/t2s/text-to-speech.proto";

// endpoints of csi service
service Conversations {
    // Processes a natural language query in audio format in a streaming fashion
    // and returns structured, actionable data as a result.
    rpc S2sStream (stream S2sStreamRequest) returns (stream S2sStreamResponse) {
    };
}

// The top-level message sent by the client to the
// `S2sStream` method.
//
// Multiple request messages should be sent in order:
//
// 1.  The first message can contain `session_id`. The message must not contain `audio` nor `end_of_stream`.
//
// 2.  All subsequent messages must contain `audio`. If `end_of_stream` is `true`, the stream is closed.
message S2sStreamRequest {
    // Optional. The input audio content to be recognized.
    bytes audio = 1;
    // Optional. The session or call ID specified in the initial request. Itâ€™s up to the API caller to choose
    // an appropriate string. It can be a random number or some type of user identifier (preferably hashed).
    string session_id = 2
    // If `true`, the recognizer will not return
    // any further hypotheses about this piece of the audio. May only be populated
    // for `event_type` = `RECOGNITION_EVENT_TRANSCRIPT`.
    bool end_of_stream = 3;
}

// The top-level message returned from the
// `S2sStream` method.
//
// A response message is returned for each utterance of the input stream. It contains the full response from NLU system
// in `detect_intent_response` together with full T2S response in `synthetize_response`.
// Multiple response messages can be returned in order:
//
// 1.  The first response message for an input utterance contains response from NLU system `detect_intent_response`
//     with detected intent and N fulfillment messages (N >= 0).
//
// 2.  The next N response messages contain T2S response `synthetize_response` with synthetized audio, one for each
//     fulfillment message.
message S2sStreamResponse {
    // full NLU response
    ondewo.nlu.DetectIntentResponse detect_intent_response = 1;
    // full T2S response
    ondewo.t2s.SynthesizeResponse synthetize_response = 2;
}
